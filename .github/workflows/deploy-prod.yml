name: Terraform Deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: tf-deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      TF_INPUT: "false"
      TF_IN_AUTOMATION: "true"

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-session-name: gha-terraform

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Init
        run: terraform -chdir=infra init -upgrade

      # Import resources that might already exist so Terraform manages them
      - name: Import pre-existing resources (idempotent)
        run: |
          terraform -chdir=infra import aws_dynamodb_table.items serverless-api-platform-items || echo "skip: table already managed or not found"
          terraform -chdir=infra import aws_lambda_function.api serverless-api-platform-fn || echo "skip: lambda already managed or not found"
          terraform -chdir=infra import aws_cloudwatch_log_group.lambda /aws/lambda/serverless-api-platform-fn || echo "skip: lambda log group already managed or not found"
          terraform -chdir=infra import aws_cloudwatch_log_group.eventbridge /aws/events/serverless-api-platform || echo "skip: events log group already managed or not found"

      - name: Apply (auto-approve)
        run: terraform -chdir=infra apply -auto-approve
      - name: Show outputs
        run: terraform -chdir=infra output -json


        
